#bibliotecas
from sqlalchemy import create_engine
import pandas as pd
import matplotlib.pyplot as plt
import streamlit as st
import datetime as dt
import seaborn as sns

#------------------------------
# Acesso ao banco e leitura
# das principais colunas
#-----------------------------

#leitura das tabelas principais

customers = pd.read_csv('data/customers.csv')
orders = pd.read_csv('data/orders.csv')
order_details = pd.read_csv('data/order_details.csv')

# Convertendo a coluna de data
orders['order_date'] = pd.to_datetime(orders['order_date'])

#------------------------------------
#CONSTRUINDO AS M√âTRICAS DO RFM
#-----------------------------------

#Rec√™ncia 

data_referencia = orders['order_date'].max()

def calcula_recencia(grupo):
    ultima_data = grupo['order_date'].max()
    return (data_referencia - ultima_data).days

recencia = orders.groupby('customer_id').apply(calcula_recencia).reset_index(name='recencia_dias')


#Frequencia 

frequencia = orders.groupby('customer_id').agg({
    'order_id':'count'
}).reset_index().rename(columns={'order_id':'frequencia_pedidos'})


#Monetario

#unindo tabela orders com tabela orders_details

pedidos_detalhes = orders.merge(order_details, on='order_id')


#criando uma coluna com o valor total de cada item comprado

pedidos_detalhes['valor_total'] = pedidos_detalhes['unit_price'] * pedidos_detalhes['quantity']

monetario = pedidos_detalhes.groupby('customer_id').agg({
    'valor_total':'sum'
}).reset_index().rename(columns={'valor_total':'valor_total_gasto'})


#unindo o RFM

rfm = recencia.merge(frequencia, on='customer_id').merge(monetario, on='customer_id')


# Calculando Ticket M√©dio
rfm['ticket_medio'] = rfm['valor_total_gasto'] / rfm['frequencia_pedidos']

#-----------------------------------
# EXPLORANDO O RFM 
# -----------------------------------
#Segmenta√ß√£o dos clientes com base na recencia

#0 30 dias - ativo
#31 a 90 dias - risco de churn
#>90 inativo

def segmenta_cliente (recencia):
    if recencia <= 30:
        return 'Cliente Ativo'
    elif recencia <= 90:
        return 'Risco de Churn'
    else: 
        return 'Inativo'
        

rfm['status_cliente'] = rfm['recencia_dias'].apply(segmenta_cliente)

# Contagem de clientes por status
count_status = rfm.groupby('status_cliente').agg({'customer_id':'nunique'}).reset_index().rename(columns={'customer_id':'qtd_clientes'})


# C√°lculo geral de inativos e risco de churn
total_clientes = rfm['customer_id'].nunique()
clientes_inativos = count_status.loc[count_status['status_cliente'] == 'Inativo', 'qtd_clientes'].values[0]
clientes_risco = count_status.loc[count_status['status_cliente'] == 'Risco de Churn', 'qtd_clientes'].values[0]

percentual_inativos = (clientes_inativos / total_clientes) * 100
percentual_risco = (clientes_risco / total_clientes) * 100
percentutal_perda_total = ((clientes_inativos + clientes_risco) / total_clientes ) *100



# KPIs calculados
total_clientes = rfm['customer_id'].nunique()
total_vendas = rfm['valor_total_gasto'].sum()
total_pedidos = rfm['frequencia_pedidos'].sum()
ticket_medio_geral = total_vendas / total_pedidos


# --------------------------
# MONTANDO O STREAMLIT
# --------------------------
# Estrutura com Abas
# --------------------------

st.title("üìä An√°lise de Clientes e Risco de Churn - RFM com Northwind Database")

tab1, tab2, tab3, tab4, tab5, tab6 = st.tabs([
    "üìå Introdu√ß√£o",
    "üìà KPIs",
    "üßë‚Äçü§ù‚Äçüßë Segmenta√ß√£o",
    "üìä Comparativos por Status",
    "üîé EDA",
    "üìã Conclus√µes"
])

# --------------------------
# Aba 1 - Introdu√ß√£o
# --------------------------
with tab1:
   

    st.markdown("""
    ### üéØ Objetivo do Projeto:

    Realizar uma an√°lise detalhada da base de clientes da empresa Northwind, utilizando a metodologia **RFM (Rec√™ncia, Frequ√™ncia e Monet√°rio)**.

    O foco principal √© **identificar padr√µes de comportamento dos clientes** e **avaliar o risco de churn (cancelamento/inatividade)**.  
    O projeto busca **classificar os clientes em diferentes segmentos estrat√©gicos**, como:

    - **Clientes Ativos**
    - **Clientes em Risco de Churn**
    - **Clientes Inativos**

    Essa segmenta√ß√£o permitir√° ao time de Marketing e Vendas **priorizar a√ß√µes de reten√ß√£o e reengajamento**.

    ---

    ### üè¢ Sobre a Base de Dados:

    O projeto utiliza o tradicional banco de dados **Northwind**, que simula as opera√ß√µes comerciais de uma distribuidora de alimentos.

    As principais tabelas utilizadas foram:

    - **Customers:** Dados cadastrais dos clientes.
    - **Orders:** Hist√≥rico de pedidos.
    - **Order Details:** Itens vendidos em cada pedido.

    ---

    ### üìà Metodologia:

    Para atingir os objetivos, foram aplicadas as seguintes t√©cnicas:

    - Manipula√ß√£o de dados e extra√ß√£o de KPIs com **PostgrSQL e Python (Pandas)**
    - Constru√ß√£o das m√©tricas **RFM** para an√°lise de comportamento
    - **Segmenta√ß√£o de clientes por risco de churn**
    - **An√°lise explorat√≥ria de dados (EDA)** para identifica√ß√£o de padr√µes
    - Cria√ß√£o de um **Dashboard interativo com Streamlit**, permitindo visualiza√ß√£o e intera√ß√£o com os dados
    """)


# --------------------------
# Aba 2 - KPIs Gerais
# --------------------------

# --------------------------
# Aba 2 - KPIs Gerais (Formato com Cards Personalizados)
# --------------------------
with tab2:
    st.header("üìà KPIs Gerais da Base de Clientes")


    col1, col2, col3, col4 = st.columns(4)

    # KPI 1 - Total de Clientes
    with col1:
        st.markdown("<h5 style='color:gray;'>Total de Clientes</h5>", unsafe_allow_html=True)
        st.markdown(f"<h3 style='color:#ffffff;'>{total_clientes:,}".replace(",", "."), unsafe_allow_html=True)

    # KPI 2 - Total de Vendas
    with col2:
        st.markdown("<h5 style='color:gray;'>Total de Vendas R$ </h5>", unsafe_allow_html=True)
        st.markdown(f"<h3 style='color:#ffffff;'>R$ {int(total_vendas):,}".replace(",", ".") + "</h3>", unsafe_allow_html=True)

    # KPI 3 - Total de Pedidos
    with col3:
        st.markdown("<h5 style='color:gray;'>Total de Pedidos</h5>", unsafe_allow_html=True)
        st.markdown(f"<h3 style='color:#ffffff;'>{total_pedidos:,}".replace(",", "."), unsafe_allow_html=True)

    # KPI 4 - Ticket M√©dio Geral
    with col4:
        st.markdown("<h5 style='color:gray;'>Ticket M√©dio Geral</h5>", unsafe_allow_html=True)
        st.markdown(f"<h3 style='color:#ffffff;'>R$ {ticket_medio_geral:,.2f}</h3>".replace(",", "X").replace(".", ",").replace("X", "."), unsafe_allow_html=True)

    st.markdown("""
    <p style='font-size:18px; color:#ffffff;'>
    Estes indicadores oferecem uma vis√£o geral da base de clientes e do volume de vendas.
    O <strong>Ticket M√©dio Geral</strong> indica o valor m√©dio de cada pedido realizado.
    </p>
    """, unsafe_allow_html=True)


# ----------------------------------
# Aba 3 - Segmenta√ß√£o de Clientes
# ----------------------------------

with tab3:
    st.header("üßë‚Äçü§ù‚Äçüßë Segmenta√ß√£o de Clientes - Status RFM")

    st.markdown("""
    A segmenta√ß√£o foi realizada com base na **Rec√™ncia (R)** das compras de cada cliente.

    **Crit√©rios de Segmenta√ß√£o:**

    - **Ativo:** √öltima compra nos √∫ltimos 30 dias
    - **Risco de Churn:** √öltima compra entre 31 e 90 dias
    - **Inativo:** √öltima compra h√° mais de 90 dias

    Essa classifica√ß√£o permite ao time comercial entender o n√≠vel de engajamento dos clientes e priorizar estrat√©gias de reten√ß√£o.
    """)


    # Op√ß√£o para escolher tipo de gr√°fico
    tipo_grafico = st.radio("Escolha o tipo de gr√°fico para visualizar a distribui√ß√£o:", ["Pizza", "Barras"])

    if tipo_grafico == "Pizza":
        fig, ax = plt.subplots()
        ax.pie(count_status['qtd_clientes'],
               labels=count_status['status_cliente'],
               autopct='%1.1f%%',
               startangle=140,
               colors=plt.cm.Paired.colors)
        ax.axis('equal')
        st.pyplot(fig)

    else:
        fig, ax = plt.subplots()
        ax.bar(count_status['status_cliente'], count_status['qtd_clientes'], color='skyblue')
        plt.xticks(rotation=45)
        plt.title('Quantidade de Clientes por Status')
        st.pyplot(fig)

    # Exibir tabela com os n√∫meros
    st.dataframe(count_status)

    st.markdown(f"""
    <p style='font-size:18px; color:#ffffff;'>
    <strong>Insight:</strong> Atualmente, <strong>{percentual_inativos:.1f}%</strong> da base de clientes est√° inativa, e <strong>{percentual_risco:.1f}%</strong> corre risco de churn, totalizando <strong>{percentutal_perda_total:.1f}%</strong> de toda a base de clientes, representando um potencial impacto significativo de receita.
    </p>
    """, unsafe_allow_html=True)


# -------------------------------------------
# Aba 4 - Comparativos por Status
# -------------------------------------------

# --------------------------
# Aba 4 - Comparativos por Status
# --------------------------
with tab4:
    st.header("üìä Comparativos de M√©tricas por Status de Cliente")

    st.markdown("""
    Aqui comparamos as principais m√©tricas **(Rec√™ncia, Frequ√™ncia, Valor Monet√°rio e Ticket M√©dio)** entre os diferentes grupos de clientes.

    Essa an√°lise permite entender como os grupos se comportam em rela√ß√£o ao volume de compras, ao gasto total e ao tempo desde a √∫ltima intera√ß√£o.
    """)

    # Agrupamento por status
    comparativo_status = rfm.groupby('status_cliente').agg({
        'recencia_dias': 'mean',
        'frequencia_pedidos': 'mean',
        'valor_total_gasto': 'mean',
        'ticket_medio': 'mean'
    }).reset_index().rename(columns={
        'recencia_dias': 'Rec√™ncia M√©dia (dias)',
        'frequencia_pedidos': 'Frequ√™ncia M√©dia de Pedidos',
        'valor_total_gasto': 'Valor M√©dio Gasto (R$)',
        'ticket_medio': 'Ticket M√©dio (R$)'
    })

    # Exibir a tabela com formata√ß√£o
    st.dataframe(comparativo_status.style.format({
        'Rec√™ncia M√©dia (dias)': '{:.1f}',
        'Frequ√™ncia M√©dia de Pedidos': '{:.1f}',
        'Valor M√©dio Gasto (R$)': 'R$ {:.2f}',
        'Ticket M√©dio (R$)': 'R$ {:.2f}'
    }))

    # Gr√°fico - Valor M√©dio Gasto por Status
    st.subheader("üí∞ Valor M√©dio Gasto por Status")
    fig, ax = plt.subplots()
    ax.bar(comparativo_status['status_cliente'], comparativo_status['Valor M√©dio Gasto (R$)'], color='salmon')
    plt.title('Valor M√©dio Gasto por Status')
    plt.ylabel('R$')
    plt.xticks(rotation=45)
    st.pyplot(fig)

    # Gr√°fico - Frequ√™ncia M√©dia por Status
    st.subheader("üì¶ Frequ√™ncia M√©dia de Pedidos por Status")
    fig, ax = plt.subplots()
    ax.bar(comparativo_status['status_cliente'], comparativo_status['Frequ√™ncia M√©dia de Pedidos'], color='lightgreen')
    plt.title('Frequ√™ncia M√©dia de Pedidos por Status')
    plt.ylabel('N√∫mero de Pedidos')
    plt.xticks(rotation=45)
    st.pyplot(fig)

    # Gr√°fico - Ticket M√©dio por Status
    st.subheader("üí≥ Ticket M√©dio por Status")
    fig, ax = plt.subplots()
    ax.bar(comparativo_status['status_cliente'], comparativo_status['Ticket M√©dio (R$)'], color='orange')
    plt.title('Ticket M√©dio por Status')
    plt.ylabel('R$')
    plt.xticks(rotation=45)
    st.pyplot(fig)

    st.markdown("""
    > **Insight:** Como esperado, os **Clientes Ativos** apresentam maior frequ√™ncia de compras e maior gasto m√©dio.
    
    > J√° os clientes em **Risco de Churn** apresentam uma queda clara nas m√©tricas de gasto e ticket m√©dio.
    
    > Curiosamente, os **Inativos** ainda mant√™m um gasto acumulado m√©dio relativamente maior, um indicativo de que muitos desses clientes j√° foram bons compradores no passado, mas hoje est√£o inativos. """)


# --------------------------
# Aba 5 - An√°lise Explorat√≥ria de Dados (EDA)
# --------------------------
with tab5:
    st.header("üîé An√°lise Explorat√≥ria das Vari√°veis RFM")

    st.markdown("""
    Nesta se√ß√£o, exploramos a distribui√ß√£o e o comportamento das principais vari√°veis da an√°lise RFM:

    - **Rec√™ncia (Dias desde a √∫ltima compra)**
    - **Frequ√™ncia (N√∫mero de Pedidos)**
    - **Valor Monet√°rio (Total gasto por cliente)**
    - **Ticket M√©dio**
    """)

    # -----------------
    # Histograma da Rec√™ncia
    # -----------------
    st.subheader("üìÖ Distribui√ß√£o da Rec√™ncia (Dias)")
    fig, ax = plt.subplots()
    ax.hist(rfm['recencia_dias'], bins=20, color='skyblue', edgecolor='black')
    plt.xlabel('Dias desde a √∫ltima compra')
    plt.ylabel('Quantidade de Clientes')
    plt.title('Histograma da Rec√™ncia')
    st.pyplot(fig)

    # -----------------
    # Boxplot - Ticket M√©dio por Status
    # -----------------
    st.subheader("üí≥ Distribui√ß√£o do Ticket M√©dio por Status de Cliente")
    fig, ax = plt.subplots()
    sns.boxplot(x='status_cliente', y='ticket_medio', data=rfm, palette='Set3', ax=ax)
    plt.title('Boxplot do Ticket M√©dio por Status')
    plt.ylabel('Ticket M√©dio (R$)')
    plt.xlabel('Status do Cliente')
    plt.xticks(rotation=45)
    st.pyplot(fig)

    # -----------------
    # Heatmap de Correla√ß√£o
    # -----------------
    st.subheader("üìà Correla√ß√£o entre as Vari√°veis RFM")
    corr = rfm[['recencia_dias', 'frequencia_pedidos', 'valor_total_gasto', 'ticket_medio']].corr()
    fig, ax = plt.subplots()
    sns.heatmap(corr, annot=True, cmap='Blues', fmt=".2f", ax=ax)
    plt.title('Matriz de Correla√ß√£o entre RFM')
    st.pyplot(fig)

    # -----------------
    # Scatterplot - Frequ√™ncia x Valor Monet√°rio
    # -----------------
    st.subheader("üìä Rela√ß√£o entre Frequ√™ncia de Pedidos e Valor Total Gasto")

    # Checando os valores √∫nicos reais
    # print(rfm['status_cliente'].unique())
    
    # Definindo as cores corretas para cada grupo real
    cores_personalizadas = {
        'Cliente Ativo': 'green',
        'Risco de Churn': 'orange',
        'Inativo': 'red'
    }
    
    fig, ax = plt.subplots()
    sns.scatterplot(
        x='frequencia_pedidos',
        y='valor_total_gasto',
        hue='status_cliente',
        data=rfm,
        palette=cores_personalizadas,
        ax=ax
    )
    plt.title('Frequ√™ncia vs Valor Total Gasto (colorido por Status)')
    plt.xlabel('Frequ√™ncia de Pedidos')
    plt.ylabel('Valor Total Gasto (R$)')
    plt.legend(title='Status do Cliente')
    st.pyplot(fig)
      

    st.markdown("""
    > **Observa√ß√µes da An√°lise Explorat√≥ria:**
    
    - **Forma√ß√£o de Clusters Visuais:** Ao observar o scatterplot, √© poss√≠vel identificar **grupos naturais de clientes com comportamentos semelhantes** em rela√ß√£o √† frequ√™ncia de pedidos e ao valor gasto. Esses clusters refor√ßam a segmenta√ß√£o feita previamente (Ativos, Risco de Churn, Inativos).
    
    - **Presen√ßa de Outliers:** Durante a an√°lise, foram identificados alguns clientes com **valores muito acima da m√©dia**, tanto em gasto quanto em frequ√™ncia de pedidos.  
    Por se tratarem de comportamentos leg√≠timos de clientes de alto valor, **optamos por n√£o remover esses outliers**, preservando a representatividade dos dados reais.
    
    - **Correla√ß√£o:** N√£o foi observada correla√ß√£o forte entre as vari√°veis RFM, mas a dispers√£o visual ajuda a entender melhor os diferentes perfis de cliente.
    """, unsafe_allow_html=True)


# --------------------------
# Aba 6 - Conclus√µes e Pr√≥ximos Passos
# --------------------------

with tab6:
    st.header("üìã Conclus√µes e Pr√≥ximos Passos")

    st.markdown("""
    ### ‚úÖ Principais Conclus√µes:

    - **Clientes Ativos** demonstram maior frequ√™ncia de compra e maior valor de gasto m√©dio por pedido.
    - **Clientes em Risco de Churn** j√° apresentam sinais claros de queda no engajamento, com menor frequ√™ncia e menor ticket m√©dio.
    - **Clientes Inativos** ainda mant√™m um gasto acumulado relativamente alto, sugerindo que muitos deles j√° foram clientes valiosos no passado.
    - A an√°lise explorat√≥ria identificou **clusters visuais distintos no comportamento dos clientes**, refor√ßando a segmenta√ß√£o feita.
    - Foram encontrados **outliers de clientes com gastos muito altos**, mas optamos por mant√™-los na base para preservar a realidade dos dados.

    ---

    ### üöÄ Pr√≥ximos Passos Recomendados:

    - **Implementar um Modelo Preditivo de Churn:**  
    Para antecipar o risco de perda de clientes, com base nas vari√°veis RFM e poss√≠veis outras vari√°veis comportamentais.

    - **Desenvolver Campanhas de Reten√ß√£o Personalizadas:**  
    Criar a√ß√µes de reengajamento focadas nos clientes em risco e inativos, com base nos insights obtidos.

    - **Monitoramento Cont√≠nuo:**  
    Criar um processo automatizado de atualiza√ß√£o da segmenta√ß√£o RFM e dos KPIs, para que a an√°lise seja usada de forma recorrente pela √°rea de neg√≥cios.

    - **Evoluir o Dashboard:**  
    Incorporar filtros interativos, an√°lises temporais e outros indicadores avan√ßados.

    ---

    ### üí° Observa√ß√£o Final:

    Este projeto foi desenvolvido com foco em aplicar conceitos fundamentais de **Ci√™ncia de Dados aplicada a Neg√≥cios**, envolvendo **SQL**, **Python (Pandas, Matplotlib, Seaborn)** e **Streamlit**.

    Todo o c√≥digo, documenta√ß√£o e storytelling est√£o dispon√≠veis no reposit√≥rio deste projeto.

    """)









